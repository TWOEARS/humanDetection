/*  Copyright (c) 2015, LAAS/CNRS
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, 
 *    this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, 
 *    this list of conditions and the following disclaimer in the documentation 
 *    and/or other materials provided with the distribution.
 * 
 * 3. Neither the name of the copyright holder nor the names of its contributors 
 *    may be used to endorse or promote products derived from this software 
 *    without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE 
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include "humandetectionStruct.idl"
#include "cameraCalibrationStruct.idl"

component humandetection{
	version		"1.0";
	lang		"c";
	require		"genom3 >= 2.99.24";
    codels-require "opencv";

    struct camera_parameters{
        unsigned long height;   /*Image dimension with which the camera was calibrated*/
        unsigned long width;    /*Image dimension with which the camera was calibrated*/
        double K[9];            /*Intrinsic camera matrix for the raw (distorted) images [3x3]*/
        double R[9];            /*Rectification matrix [3x3]*/
        double P[12];           /*Projection/camera matrix [3x4]*/
    };

    struct ClassifiersLoaded
    {
        sequence<string> classifiers;
        unsigned long loaded;
    };

    port out detectionH::Detections Humans;
    port out ClassifiersLoaded Classifiers;
    port in detectionH::sensor_msgs__Image MasterCamera;
    port in detectionH::sensor_msgs__Image SlaveCamera;
    port in calibrationParameters::sensor_msgs__CameraInfo LeftCameraParameters;
    port in calibrationParameters::sensor_msgs__CameraInfo RightCameraParameters;

    exception error_videoCap;

    ids
    {
        camera_parameters LeftCameraParameters;
        camera_parameters RightCameraParameters;

        sequence<detectionH::people> People;
        sequence<detectionH::centers> MasterDetectionCenters;
        sequence<detectionH::centers> SlaveDetectionCenters;

        ClassifiersLoaded Classifiers;

        unsigned long nbframe;
    };

    task Detection{
        period      detectionH::task_Detection_period ms;
        priority    100;
        stack       4000;
    };

    activity RunDetection(
        in unsigned long frameHistory = 10 : "Number of frames to publish on the port.",
        in string classifiers = "classifiers.txt",
        in float templateMatchingThreshold,
        in float disparityThreshold)
    {       

        codel <start>   InitRunDetection(inout ::ids,
                                        local in frameHistory,
                                        local in classifiers,
                                        port in LeftCameraParameters,
                                        port in RightCameraParameters,
                                        port out Humans,
                                        port out Classifiers) yield exec, ether;
        codel <exec>    ExecRunDetection(inout ::ids,
                                        port in MasterCamera,
                                        port in SlaveCamera,
                                        port out Humans,
                                        local in templateMatchingThreshold,
                                        local in disparityThreshold) yield exec, stop;
        codel <stop>    StopRunDetection(inout ::ids, port out Humans) yield ether;
        throw error_videoCap;

        task Detection;
    };

    activity ChangeClassifier(
            in unsigned short classifier)
    {
        codel <start> InitChangeClassifier(local in classifier, port out Classifiers) yield ether;

        task Detection;
    };
};


/* 
To compile: genom3 skeleton -l c++ -i humandetection.gen

::humandetection::connect_port MasterCamera /stereo/left/image_rect_color
::humandetection::connect_port SlaveCamera /stereo/right/image_rect_color
::humandetection::connect_port LeftCameraParameters /stereo/left/camera_info
::humandetection::connect_port RightCameraParameters /stereo/right/camera_info


::humandetection::RunDetection {frameHistory 3 classifiers /home/ariel/Documents/LAAS/twoears/repositories/humandetection/classifiers.txt templateMatchingThreshold 0.75 disparityThreshold 10}

*/
